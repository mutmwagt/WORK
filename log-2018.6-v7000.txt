#1 v7000研究日志(2018.6.19-20)
	0.概述
		0.1 原理
			V7000是一个RAID阵列虚拟化智能存储系统.多个物理磁盘组成单个RAID阵列提供MDISK,多个MDISK组成单个Pool提供存储池.配置节点把存储池重新按条带卷模式划分出多个VDISK提供LUN存储.Pool层的位图存放在系统SDD中.
		0.2 样本
			样本V7000存储系统使用(4+P)和(5+P)两个阵列+1热备,共12块盘,分别提供2个MDISK,在2个MDISK上各虚拟化出1个Pool,每个Pool分出多个 VDISK,提供LUN存储.
		0.3 缺陷
			控制器损坏,无法启动,其中一组Pool上的LUN没有分析出.
		0.4 目标
			在控制器中找到那组Pool中LUN的位图,并验证数据完整性.
		0.5 方法
			通过测试,还原样本环境,并通过写入数据,测试出位图在控制器中的位置.
	1.创建测试数据
		1.1 配置
			启动V7000操作系统,配置初始状态.
		1.2 环境
			简化环境,使用1个节点容器,3块盘.
		1.3 操作
			组RAID5(2+P),分1个MDISK,组1个Pool,建3次普通卷(LUN).
		1.4 镜像
			每次操作都镜像一次控制器SSD中的数据.
	2.分析测试数据
		2.1 UFS
		2.2 WINHEX
	3.验证测试结果
		3.1 脚本
		找出的位图和算法编辑脚本跑MDISK数据,看与配置的LUN数据是否一致.

#2 v7000研究日志(2018.6.21)
	0.概述
		0.1 资料整理
			通过V7000官方文档以及相关使用的分布式虚拟化存储阵列的一些概念,基本熟悉了V7000的SVC的基本术语含义.
		0.2 实验整理
			通过对比V7000样本,并创建测试数据,比对V7000系统盘数据,寻找GBFS组织架构,找出V7000缓存位图原理和一系列其他组件原理,并解构出含义.
		0.3 代码整理
			在系统盘找到源代码部分和调用函数部分,找到调用函数调用的文件,找到文件中规划出的MDISK的元数据索引的第一个LBA,和后续的排列,然后写成程序,自动化完成拼接.
	1.细节
		1.1 需要的概念
			1.1.1 V7000使用原理
				V7000控制器GBFS集群系统管理存储阵列虚拟化出的Pool,存储阵列的生成统一由集群中的RAID阵列管理系统创建,应用程序主机智能组成存储阵列后并由控制器生成的Pool(MDISK_grp),使用Pool内的LUN(VDISK_grp)
			1.1.2 V7000存储原理
				V7000存储分为读写,(I/O),由于V7000的硬件架构特性,写入不需要经过高速缓存直接写入磁盘,读取则通过高速缓存传入应用程序服务器.集群运用多个安全措施和增加性能的组件让分布式存储更加高效,并支持多主机并行读写,且传输速度稳定,包括EasyTier分层存储,LUN的卷存储,快照(snapshort)功能,多级缓存(cache)
		1.2 系统盘分析
			1.2.1 UFS后的磁盘快照
				经过UFS分解,GBFS集群系统的分区快照.
			1.2.2 系统分区解析
				整个系统分为10个区
				1.2.2.1 BOOT分区
					第一个分区挂载的FAT32格式的引导分区
				1.2.2.2 Linux其他分区
					其他9个术语Linxu分区,包括root,upgrade,data,var,dumps,compass,tmp,opt,home.

					dumps分区存放了高速缓存的所有缓存日志,包括ERROR,CIM,Easytier,I/O states,mdisk等,所有写入读取缓存的指针都在日志中,实现系统可用性审计功能.
					
					data分区存放的是web服务器(apache-tomcat)(html),实现管理系统CLI(manager,SSH,CIMON),以及审计日志(vpd),硬数据(hardened data){数据指针(IBM COMPASS DUMP)包括块指针和EXTENT指针),指针通过SVC24_64的plcsm.o汇编函数调用,恢复样本中的LUN分布.

					root分区是系统根目录,负责挂载其他分区.

					var分区存放的是系统GUI调用函数和脚本,(X11R6)

					compass分区存放的处理压缩和精简的脚本.

					opt分区存放的是系统安装调用函数脚本(SSH).

					home分区存放的是SVCupgrade的代码,真正实现节点控制功能的源码(.py&.pl)

					tmp分区存放的是Unix系统的临时文件.

					upgrade分区存放的节点容器的驱动(ibm2076_DRIVE)
			1.2.3 测试样本日志解析	
				通过日志样本,找到,dumps分区中存放了系统组件的索引,包括电池组件索引(main page),缓存中的数据块索引(RAM DATA Block ),LUN索引,SES page,	VPD,驱动在内存的索引(SAS)	

				除了索引,还有部分日志,有三种是IBM.SVC性能统计信息(https://www-01.ibm.com/support/docview.wss?uid=ssg1S1003432)(MDISK,VDISK,NODE)

				还有I/O组件日志(enclosuredump)(GZ压缩文件),存放了LUN,Pool,extent的MapBinBuffer,(extent是LUN中的块单位,之前样本定义了extent的单位是256M).

				本次要找的LUN级块位图的变化就记录在enclosuredump中,配置也在里面(lunConfiguration).对日志比较后,发现所有操作都记录在日志中,最新的日志更新了最新的操作和配置.
		1.3 SUMMARY
			指针保存在data/hardeneddata.

#3 v7000研究日志(2018.6.21)
	0.思路概述
		0.1 资料整理
			通过V7000官方文档细化到具体RAID代码(RAS),位图(BITMAP),映射(MAPPING),指针(compass),缓存(cache),索引(index),表(table)
		0.2 实验整理
			基于实验数据,研究样本SSD系统盘中的转储分区(dumps)中的硬化数据(Hardened Data)和RAID存储阵列的LUN映射模块(MAPPING),Winhex分析数据样本,找到规律和映射格式.
		0.3 代码整理
			基于分析出的LUN映射算法(MAPPING),RAID算法(RAS),硬化数据算法(Hardeneddata),写出脚本拼出碎片.

#4 v7000研究日志(2018.6.22)
	0.概述
		0.1 前3天测试总结
			0.1.1 测试1(苏谭)
				样本:三块500G底层填AA的硬盘.
				操作:组 RAID5 , 划6个 LUN ,并灌入数据
				结果:部分空间清零,后半部分还保留AA
				验证:通过灌入数据,发现RAID池前偏移为0.
			0.1.2 测试2(小顾)
				样本:三块10G底层为0的硬盘.
				操作:组RAID5, 划 3个 LUN ,并灌入数据
				结果:空间清0,残余部分类似LUN的指针位图.
			0.1.3 总结
				比对2个样本,发现初始化后底层会清0,但是存在过程,如果划LUN后直接关机,则初始化未完成,实验数据有问题,如果初始化完成,三块单盘由部分RAID信息在最后部分扇区.
#5 v7000研究日志(2018.6.23-24)
	0.概述
		0.1 实验(1,2,3)
			0.1.1 三块10G硬盘，组成RAID5,未分配LUN
				镜像3块磁盘
				镜像控制器SSD
			0.1.2 重新启动V7000，再次镜像3块硬盘和SSD
				对两次镜像进行对比
			0.1.3 分配一个LUN，没有写入数据
				镜像硬盘和控制器
		0.2 样本分析
#6 v7000研究日志(2018.6.25)
	0.概述
		0.1 实验()
				

